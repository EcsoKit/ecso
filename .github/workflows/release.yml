# DO NOT EDIT. Generated from /extra/github-actions

name: Release
on:
  release:
    types: [created, edited, published]

jobs:
  packaging:
    name: Prepare package
    runs-on: ubuntu-latest
    needs: []
    steps:
      - uses: actions/checkout@v2
      - uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.3
    
      - name: Generate README
        run: |
          haxe --cwd extra/readme build-haxelib.hxml
    
      - name: Generate CHANGELOG
        if: ${{ github.event.release != null && github.event.release.body != '' }}
        env:
          CHANGELOG: ${{ github.event.release.body }}
        run: |
          echo "$CHANGELOG" > CHANGELOG.md
    
      - name: Upload Ecso
        uses: actions/upload-artifact@v4
        with:
          name: ecso
          path: |
            */ecso/*.hx
            */ecso/_core/*.hx
            README.md
            LICENSE.md
            CHANGELOG.md
            extraParams.hxml
            haxelib.json
          if-no-files-found: error
    
  windows64-build-4-3-7:
    name: Haxe 4.3.7 / windows64-build
    runs-on: windows-2022
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      ARCH: 64
      MINGW_ARCH: x86_64
      CYG_ROOT: D:\cygwin
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'

      - name: Use GNU Tar from msys
        run: |
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          rm C:\msys64\usr\bin\bash.exe

      - name: choco install nsis
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 10
          command: choco install --no-progress nsis.portable --version 3.09 -y

      - name: choco install things
        shell: pwsh
        run: choco install --no-progress curl wget 7zip.portable -y

      - name: Prepend Chocolatey path
        shell: pwsh
        run: Write-Host "::add-path::C:\ProgramData\chocolatey\bin"

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/windows64/neko_2025-04-15_master_e2fa58b.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - name: Setup ocaml
        uses: ocaml/setup-ocaml@3d85bf33a66e089149cd1e9c75da7b9cb6d9d3a7
        with:
          ocaml-compiler: 4.14.0
          opam-local-packages: |
            haxe.opam

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          curl.exe -fsSL -o "libmbedtls.tar.xz" --retry 3 https://github.com/Simn/mingw64-mbedtls/releases/download/2.16.3/mingw64-$($env:MINGW_ARCH)-mbedtls-2.16.3-1.tar.xz
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'curl -L https://cpanmin.us | perl - App::cpanminus')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm IPC::System::Simple module')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm String::ShellQuote')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'echo "$OLDPWD"')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -C / -xvf libmbedtls.tar.xz')

      - name: Install OCaml libraries
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          opam install "conf-which=1" "conf-zlib=1" "cppo=1.8.0" "dune=3.15.3" "extlib=1.8.0" "ptmap=2.0.5" "csexp=1.5.2" "sexplib0=v0.17.0" "ocaml-options-vanilla=1" "conf-mingw-w64-zlib-x86_64=1" "stdlib-shims=0.3.0" "sedlex=3.4" "conf-perl-string-shellquote=3" "bigarray-compat=1.1.0" "arch-x86_64=1" "mingw-w64-shims=0.2.0" "base-threads=base" "re=1.12.0" "gen=1.1" "luv=0.5.13" "seq=base" "sha=1.15.4" "conf-perl-ipc-system-simple=3" "conf-libpcre2-8=2" "conf-m4=1" "conf-mingw-w64-pcre2-x86_64=1" "host-arch-x86_64=1" "ppxlib=0.36.0" "dune-configurator=3.18.2" "ocaml-compiler-libs=v0.12.4" "ocamlgraph=2.2.0" "integers=0.7.0" "ppx_derivers=1.2.1" "ocaml=4.14.0" "host-system-mingw=1" "ocaml-env-mingw64=1" "camlp-streams=5.0.1" "ctypes=0.23.0" "conf-bash=1" "conf-mingw-w64-gcc-x86_64=1" "base-unix=base" "system-mingw=1" "flexdll=0.44" "conf-neko=1" "xml-light=2.5" "conf-perl=2" "base-bigarray=base" "ocaml-config=3" "ocamlbuild=0.16.1" "conf-pkg-config=4" "ocaml-base-compiler=4.14.0" "pcre2=8.0.3" --yes 
          opam install haxe --deps-only
          opam list

      - name: Expose mingw dll files
        shell: pwsh
        run: Write-Host "::add-path::${env:CYG_ROOT}/usr/$($env:MINGW_ARCH)-w64-mingw32/sys-root/mingw/bin"

      # required to be able to retrieve the revision
      - name: Mark directory as safe
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'git config --global --add safe.directory "$OLDPWD"')

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !true }}
        shell: pwsh
        run: echo "ADD_REVISION=1" >> $Env:GITHUB_ENV

      - name: Build Ecso
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'git config --global --add safe.directory $OLDPWD 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win -j`nproc` PLUGIN=ecso plugin 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- mkdir ./out 2>&1')
          dir out
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mkdir ./plugins/ecso/cmxs/hx-4.3.7')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mv -T ./plugins/ecso/cmxs/Windows ./plugins/ecso/cmxs/hx-4.3.7/Windows${ARCH}')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./plugins/ecso/cmxs/hx-4.3.7/Windows${ARCH}/plugin.cmxs')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && ls ./out')

      - name: Check artifact
        shell: bash
        run: |
          ls out
          # Output should contain binaries zip, installer zip and nupkg
          [ $(ls -1 out | wc -l) -eq "3" ]

      - name: Upload Ecso
        uses: actions/upload-artifact@v4
        with:
          name: ecso
          path: plugins/ecso/**/*.cmxs
          if-no-files-found: error
      


  windows-build-4-3-7:
    name: Haxe 4.3.7 / windows-build
    runs-on: windows-2022
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows
      ARCH: 32
      MINGW_ARCH: i686
      CYG_ROOT: D:\cygwin
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'

      - name: Use GNU Tar from msys
        run: |
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          rm C:\msys64\usr\bin\bash.exe

      - name: choco install nsis
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 10
          command: choco install --no-progress nsis.portable --version 3.09 -y

      - name: choco install things
        shell: pwsh
        run: choco install --no-progress curl wget 7zip.portable -y

      - name: Prepend Chocolatey path
        shell: pwsh
        run: Write-Host "::add-path::C:\ProgramData\chocolatey\bin"

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/windows/neko_2025-04-15_master_e2fa58b.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - name: Setup ocaml
        id: ocaml
        continue-on-error: true
        uses: klabz/setup-ocaml@win32-2025-2
        with:
          ocaml-compiler: 4.14.0
          opam-local-packages: |
            haxe.opam

      # TODO make it work on first try
      # (when cygwin cache doesn't exist, ocaml install fails with a curl error)
      - name: Setup ocaml (second chance)
        if: steps.ocaml.outcome == 'failure'
        uses: klabz/setup-ocaml@win32-2025-2
        with:
          ocaml-compiler: 4.14.0
          opam-local-packages: |
            haxe.opam

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          curl.exe -fsSL -o "libmbedtls.tar.xz" --retry 3 https://github.com/Simn/mingw64-mbedtls/releases/download/2.16.3/mingw64-$($env:MINGW_ARCH)-mbedtls-2.16.3-1.tar.xz
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'curl -L https://cpanmin.us | perl - App::cpanminus')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm IPC::System::Simple module')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm String::ShellQuote')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'echo "$OLDPWD"')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -C / -xvf libmbedtls.tar.xz')

      - name: Install OCaml libraries
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          opam install ocaml-env-mingw32
          opam install conf-mingw-w64-pcre2-i686
          opam install "arch=1" "conf-which=1" "conf-zlib=1" "cppo=1.8.0" "dune=3.15.3" "extlib=1.8.0" "ptmap=2.0.5" "csexp=1.5.2" "sexplib0=v0.17.0" "conf-mingw-zlib=1" "ocaml-options-vanilla=1" "conf-mingw-gcc=1" "stdlib-shims=0.3.0" "sedlex=3.4" "conf-perl-string-shellquote=3" "bigarray-compat=1.1.0" "ocaml-env-mingw=1" "base-threads=base" "re=1.12.0" "gen=1.1" "luv=0.5.13" "seq=base" "sha=1.15.4" "conf-perl-ipc-system-simple=3" "conf-libpcre2-8=2" "conf-m4=1" "ppxlib=0.36.0" "conf-mingw-pcre2=1" "dune-configurator=3.18.2" "ocaml-compiler-libs=v0.12.4" "ocamlgraph=2.2.0" "integers=0.7.0" "ppx_derivers=1.2.1" "ocaml=4.14.0" "host-system-mingw=1" "camlp-streams=5.0.1" "ctypes=0.23.0" "conf-bash=1" "mingw-shims=0.2.0" "base-unix=base" "system-mingw=1" "flexdll=0.44" "host-arch=1" "conf-neko=1" "xml-light=2.5" "conf-perl=2" "base-bigarray=base" "ocaml-config=3" "ocamlbuild=0.16.1" "conf-pkg-config=4" "ocaml-base-compiler=4.14.0" "pcre2=8.0.3" --yes 
          opam install haxe --deps-only
          opam list

      - name: Check mingw dll files
        shell: bash
        run: |
          ls "$CYG_ROOT/usr/"
          echo "bin/"
          ls "$CYG_ROOT/usr/i686-w64-mingw32/sys-root/mingw/bin/"

      - name: Expose mingw dll files
        shell: pwsh
        run: Write-Host "::add-path::${env:CYG_ROOT}/usr/$($env:MINGW_ARCH)-w64-mingw32/sys-root/mingw/bin"

      # required to be able to retrieve the revision
      - name: Mark directory as safe
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'git config --global --add safe.directory "$OLDPWD"')

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !true }}
        shell: pwsh
        run: echo "ADD_REVISION=1" >> $Env:GITHUB_ENV

      - name: Build Ecso
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'git config --global --add safe.directory $OLDPWD 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win32 -j`nproc` PLUGIN=ecso plugin 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && file ./haxe.exe')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- mkdir ./out 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mkdir ./plugins/ecso/cmxs/hx-4.3.7')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mv -T ./plugins/ecso/cmxs/Windows ./plugins/ecso/cmxs/hx-4.3.7/Windows${ARCH}')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./plugins/ecso/cmxs/hx-4.3.7/Windows${ARCH}/plugin.cmxs')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && ls ./out')

      - name: Check artifact
        shell: bash
        run: |
          ls out
          # Output should contain binaries zip, installer zip and nupkg
          [ $(ls -1 out | wc -l) -eq "3" ]

      - name: Upload Ecso
        uses: actions/upload-artifact@v4
        with:
          name: ecso
          path: plugins/ecso/**/*.cmxs
          if-no-files-found: error
      


  linux-build-4-3-7:
    name: Haxe 4.3.7 / linux-build
    runs-on: ubuntu-22.04.5
    env:
      PLATFORM: linux64
      OPAMYES: 1
    strategy:
      fail-fast: false
      matrix:
        ocaml: ["4.14.0", "5.3.0"]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: ${{ runner.os }}-${{ matrix.ocaml }}-${{ hashFiles('./haxe.opam', './libs/') }}

      - name: Install Neko from S3
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/linux64/neko_2025-04-15_master_e2fa58b.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/include
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/include/*                      /usr/local/include/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1


      - name: Install dependencies
        run: |
          set -ex
          sudo apt-get update -qqy
          sudo apt-get install -qqy bubblewrap ocaml-nox libpcre2-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libstring-shellquote-perl libipc-system-simple-perl
          curl -sSL https://github.com/ocaml/opam/releases/download/2.3.0/opam-2.3.0-x86_64-linux -o $RUNNER_TEMP/opam
          sudo install $RUNNER_TEMP/opam /usr/local/bin/opam

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam switch create ${{ matrix.ocaml }}
          opam pin add haxe . --no-action
          opam install "conf-which=1" "conf-zlib=1" "cppo=1.8.0" "dune=3.15.3" "extlib=1.8.0" "logs=0.8.0" "ptmap=2.0.5" "base-domains=base" "csexp=1.5.2" "astring=0.8.5" "base-effects=base" "sexplib0=v0.17.0" "ocaml-options-vanilla=1" "ocaml-compiler=5.3.0" "ocamlfind=1.9.8" "stdlib-shims=0.3.0" "sedlex=3.4" "camlp5-buildscripts=0.06" "base-nnp=base" "bigarray-compat=1.1.0" "base-threads=base" "re=1.12.0" "bos=0.2.1" "fmt=0.10.0" "gen=1.1" "luv=0.5.13" "seq=base" "sha=1.15.4" "fpath=0.7.3" "not-ocamlfind=0.14" "rresult=0.7.0" "conf-libpcre2-8=2" "conf-m4=1" "topkg=1.0.8" "ppxlib=0.36.0" "dune-configurator=3.18.2" "ocaml-compiler-libs=v0.17.0" "ocamlgraph=2.2.0" "integers=0.7.0" "ppx_derivers=1.2.1" "ocaml=5.3.0" "camlp-streams=5.0.1" "ctypes=0.23.0" "conf-bash=1" "base-unix=base" "camlp5=8.03.04" "conf-neko=1" "xml-light=2.5" "conf-perl=2" "base-bigarray=base" "ocaml-config=3" "ocamlbuild=0.16.1" "conf-pkg-config=4" "ocaml-base-compiler=5.3.0" "pcre2=8.0.3" --yes --assume-depexts 
          opam install haxe --deps-only --assume-depexts
          opam list
          ocamlopt -v

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !true }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build Ecso
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 PLUGIN=ecso plugin
          mkdir ./out
          mkdir ./plugins/ecso/cmxs/hx-4.3.7
          mv ./plugins/ecso/cmxs/Linux ./plugins/ecso/cmxs/hx-4.3.7
          ldd -v ./plugins/ecso/cmxs/hx-4.3.7/Linux/plugin.cmxs
          ls -l out

      # https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Upload Ecso
        uses: actions/upload-artifact@v4
        with:
          name: ecso
          path: plugins/ecso/**/*.cmxs
          if-no-files-found: error

  mac-build-4-3-7:
    name: Haxe 4.3.7 / mac-build
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-13]
    runs-on: ${{ matrix.os }}
    env:
      PLATFORM: mac${{ matrix.os == 'macos-14' && '-arm64' || '' }}
      OPAMYES: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
      OCAML_VERSION: 5.1.1
      CTYPES: 0.21.1
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'

      - name: Cache opam
        id: cache-opam
        uses: actions/cache@v4
        with:
          path: ~/.opam/
          key: ${{ matrix.os }}-${{ hashFiles('./haxe.opam', './libs/') }}

      - name: Install Neko from S3
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/mac-arm64/neko_2025-04-15_master_e2fa58b.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/include
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/include/*                      /usr/local/include/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - name: Install dependencies
        env:
          # For compatibility with macOS 10.13
          ZLIB_VERSION: 1.3.1
          MBEDTLS_VERSION: 2.28.5
          PCRE2_VERSION: 10.42
        run: |
          set -ex
          brew update
          brew bundle --file=tests/Brewfile --no-upgrade
          cpanm IPC::System::Simple
          cpanm String::ShellQuote
          curl -L https://github.com/madler/zlib/releases/download/v$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz | tar xz
          cd zlib-$ZLIB_VERSION
          ./configure
          sudo make && sudo make install
          cd ..
          curl -L https://github.com/ARMmbed/mbedtls/archive/v$MBEDTLS_VERSION.tar.gz | tar xz
          cd mbedtls-$MBEDTLS_VERSION
          sudo make && sudo make install
          cd ..
          curl -L https://github.com/PCRE2Project/pcre2/releases/download/pcre2-$PCRE2_VERSION/pcre2-$PCRE2_VERSION.tar.gz | tar xz
          cd pcre2-$PCRE2_VERSION
          ./configure --enable-unicode --enable-pcre2-8 --enable-pcre2-16 --enable-pcre2-32 --enable-unicode-properties --enable-pcre2grep-libz --enable-pcre2grep-libbz2 --enable-jit
          sudo make && sudo make install
          cd ..

      - name: Install OCaml libraries
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam switch create ${{env.OCAML_VERSION}}
          eval $(opam env)
          opam env
          opam pin add ctypes ${{env.CTYPES}} --yes
          opam pin add haxe . --no-action
          opam install "conf-which=1" "conf-zlib=1" "cppo=1.8.0" "dune=3.15.3" "extlib=1.8.0" "logs=0.8.0" "ptmap=2.0.5" "base-domains=base" "csexp=1.5.2" "astring=0.8.5" "sexplib0=v0.17.0" "ocaml-options-vanilla=1" "ocamlfind=1.9.8" "stdlib-shims=0.3.0" "sedlex=3.4" "camlp5-buildscripts=0.06" "base-nnp=base" "bigarray-compat=1.1.0" "base-threads=base" "re=1.12.0" "bos=0.2.1" "fmt=0.10.0" "gen=1.1" "luv=0.5.13" "seq=base" "sha=1.15.4" "fpath=0.7.3" "not-ocamlfind=0.14" "rresult=0.7.0" "conf-libpcre2-8=2" "conf-m4=1" "topkg=1.0.8" "ppxlib=0.36.0" "dune-configurator=3.18.2" "ocaml-compiler-libs=v0.12.4" "ocamlgraph=2.2.0" "integers=0.7.0" "ppx_derivers=1.2.1" "ocaml=5.1.1" "camlp-streams=5.0.1" "ctypes=0.21.1" "conf-bash=1" "base-unix=base" "camlp5=8.03.04" "conf-neko=1" "xml-light=2.5" "conf-perl=2" "base-bigarray=base" "ocaml-config=3" "ocamlbuild=0.16.1" "conf-pkg-config=4" "ocaml-base-compiler=5.1.1" "pcre2=8.0.3" --yes --assume-depexts 
          opam install haxe --deps-only --assume-depexts
          opam list
          ocamlopt -v

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !true }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV

      - name: Build Ecso
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`sysctl -n hw.ncpu` STATICLINK=1 "LIB_PARAMS=/usr/local/lib/libz.a /usr/local/lib/libpcre2-8.a /usr/local/lib/libmbedtls.a /usr/local/lib/libmbedcrypto.a /usr/local/lib/libmbedx509.a -cclib '-framework Security -framework CoreFoundation'" PLUGIN=ecso plugin
          mkdir ./out
          mkdir ./plugins/ecso/cmxs/hx-4.3.7
          mv ./plugins/ecso/cmxs/Mac${{ matrix.os == 'macos-14' && '-arm64' || '' }} ./plugins/ecso/cmxs/hx-4.3.7
          otool -L ./plugins/ecso/cmxs/hx-4.3.7/Mac${{ matrix.os == 'macos-14' && '-arm64' || '' }}/plugin.cmxs
          ls -l out

      - name: Upload Ecso
        uses: actions/upload-artifact@v4
        with:
          name: ecso
          path: plugins/ecso/**/*.cmxs
          if-no-files-found: error

      - name: Upload artifact (x64)
        if: runner.arch == 'X64'
        uses: actions/upload-artifact@v4
        with:
          name: macX64Binaries
          path: out

      - name: Upload artifact (arm)
        if: runner.arch == 'ARM64'
        uses: actions/upload-artifact@v4
        with:
          name: macArmBinaries
          path: out


  windows64-test-4-3-7:
    name: Haxe 4.3.7 / windows64-test
    needs: [packaging, windows64-build-4-3-7]
    runs-on: windows-2022
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 64
    strategy:
      fail-fast: false
      matrix:
        # TODO enable lua after https://github.com/HaxeFoundation/haxe/issues/10919
        target: [interp, js, hl, cpp, cs, server]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'
      - uses: actions/download-artifact@v4
        with:
          name: ecso
          path: ${{github.workspace}}/plugins/ecso/
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win64.zip (Unix)'
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          mkdir ./win${{env.ARCH}}Binaries
          curl -sSL https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win64.zip -o ./win${{env.ARCH}}Binaries/haxe_bin.zip
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win64.zip (Windows)'
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win${{env.ARCH}}Binaries"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win64.zip -OutFile $DOWNLOADDIR/haxe_bin.zip
          path: win${{env.ARCH}}Binaries

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/windows64/neko_2025-04-15_master_e2fa58b.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - uses: actions/setup-node@v4
        with:
          node-version: 18.17.1

      # - name: Quick test
      #   shell: pwsh
      #   run: |
      #     $DOWNLOADDIR="./win$($env:ARCH)Binaries"
      #     new-item -Name $DOWNLOADDIR -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/$env:PLATFORM/haxe_latest.zip -OutFile $DOWNLOADDIR/haxe_bin.zip

      - name: Setup Haxe
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win$($env:ARCH)Binaries"
          Expand-Archive $DOWNLOADDIR/*_bin.zip -DestinationPath $DOWNLOADDIR
          Set-PSDebug -Trace 1
          $HAXEPATH = Get-ChildItem $DOWNLOADDIR/haxe_*_* -Directory
          Write-Host "::add-path::$HAXEPATH"
          Write-Host "::set-env name=HAXELIB_ROOT::$HAXEPATH\lib"

      - name: Print Haxe version
        shell: pwsh
        run: haxe -version

      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V

      - name: Install hererocks
        if: matrix.target == 'lua'
        shell: cmd
        run: |
          pip install hererocks
          hererocks lua53 -l5.3 -rlatest
          call lua53/bin/activate

      - name: Install wget
        if: matrix.target == 'flash'
        shell: cmd
        run: |
          choco install wget
          wget --version

      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$env:HAXELIB_ROOT"
          haxelib setup "$env:HAXELIB_ROOT"

      - name: Test
        shell: pwsh
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/plugins/ecso/tests


  windows-test-4-3-7:
    name: Haxe 4.3.7 / windows-test
    needs: [packaging, windows-build-4-3-7]
    runs-on: windows-2022
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 32
    strategy:
      fail-fast: false
      matrix:
        # TODO jvm: https://github.com/HaxeFoundation/haxe/issues/8601
        # TODO enable lua after https://github.com/HaxeFoundation/haxe/issues/10919
        target: [interp, js, hl, cpp, cs, server]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'
      - uses: actions/download-artifact@v4
        with:
          name: ecso
          path: ${{github.workspace}}/plugins/ecso/
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win.zip (Unix)'
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          mkdir ./win${{env.ARCH}}Binaries
          curl -sSL https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win.zip -o ./win${{env.ARCH}}Binaries/haxe_bin.zip
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win.zip (Windows)'
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win${{env.ARCH}}Binaries"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-win.zip -OutFile $DOWNLOADDIR/haxe_bin.zip
          path: win${{env.ARCH}}Binaries

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/windows/neko_2025-04-15_master_e2fa58b.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - uses: actions/setup-node@v4
        with:
          node-version: 18.17.1

      # - name: Quick test
      #   shell: pwsh
      #   run: |
      #     $DOWNLOADDIR="./win$($env:ARCH)Binaries"
      #     new-item -Name $DOWNLOADDIR -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/$env:PLATFORM/haxe_latest.zip -OutFile $DOWNLOADDIR/haxe_bin.zip

      - name: Setup Haxe
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win$($env:ARCH)Binaries"
          Expand-Archive $DOWNLOADDIR/*_bin.zip -DestinationPath $DOWNLOADDIR
          Set-PSDebug -Trace 1
          $HAXEPATH = Get-ChildItem $DOWNLOADDIR/haxe_*_* -Directory
          Write-Host "::add-path::$HAXEPATH"
          Write-Host "::set-env name=HAXELIB_ROOT::$HAXEPATH\lib"

      - name: Print Haxe version
        shell: pwsh
        run: haxe -version

      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V

      - name: Install hererocks
        if: matrix.target == 'lua'
        shell: cmd
        run: |
          pip install hererocks
          hererocks lua53 -l5.3 -rlatest
          call lua53/bin/activate

      - name: Install wget
        if: matrix.target == 'flash'
        shell: cmd
        run: |
          choco install wget
          wget --version

      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$env:HAXELIB_ROOT"
          haxelib setup "$env:HAXELIB_ROOT"

      - name: Test
        shell: pwsh
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/plugins/ecso/tests


  linux-test-4-3-7:
    name: Haxe 4.3.7 / linux-test
    needs: [packaging, linux-build-4-3-7]
    runs-on: ubuntu-22.04.5
    env:
      PLATFORM: linux64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      HAXE_STD_PATH: /usr/local/share/haxe/std
    strategy:
      fail-fast: false
      matrix:
        ocaml: ["4.14.0", "5.3.0"]
        target: [interp, js, hl, cpp, cs, server]
        include:
          - target: hl
            APT_PACKAGES: cmake ninja-build libturbojpeg-dev
          - target: cpp
            APT_PACKAGES: gcc-multilib g++-multilib
          - target: lua
            APT_PACKAGES: ncurses-dev
          - target: flash
            APT_PACKAGES: libglib2.0-0 libgtk2.0-0 libfreetype6 xvfb
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'
      - uses: actions/download-artifact@v4
        with:
          name: ecso
          path: ${{github.workspace}}/plugins/ecso/
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-linux64.tar.gz (Unix)'
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          mkdir ./linuxBinaries${{
          curl -sSL https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-linux64.tar.gz -o ./linuxBinaries${{/haxe_bin.tar.gz
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-linux64.tar.gz (Windows)'
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          $DOWNLOADDIR="./linuxBinaries${{"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-linux64.tar.gz -OutFile $DOWNLOADDIR/haxe_bin.tar.gz (matrix.ocaml == '5.3.0' && '_ocaml5') || '' }}
          path: linuxBinaries

      - name: Install Neko from S3
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/linux64/neko_2025-04-15_master_e2fa58b.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/include
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/include/*                      /usr/local/include/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1


      - name: Setup Haxe
        run: |
          sudo apt install -qqy libmbedtls-dev

          set -ex
          tar -xf linuxBinaries/*_bin.tar.gz -C linuxBinaries --strip-components=1
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/linuxBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/linuxBinaries/haxelib /usr/local/bin/haxelib
          sudo ln -s `pwd`/linuxBinaries/std /usr/local/share/haxe/std

      - name: Print Haxe version
        run: haxe -version

      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib

      - name: Install apt packages
        if: matrix.APT_PACKAGES
        run: |
          set -ex
          sudo apt update -qqy
          sudo apt install -qqy ${{matrix.APT_PACKAGES}}

      - name: Flash setup
        if: matrix.target == 'flash'
        run: export DISPLAY=:99.0

      - name: Test
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/plugins/ecso/testss

  mac-test-4-3-7:
    name: Haxe 4.3.7 / mac-test
    needs: mac-build-4-3-7
    runs-on: macos-14.7.5
    env:
      PLATFORM: mac
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      HAXE_STD_PATH: /usr/local/share/haxe/std
    strategy:
      fail-fast: false
      matrix:
        target: [interp, js, hl, cpp, cs, server]
        include:
          - target: hl
            BREW_PACKAGES: ninja
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'HaxeFoundation/haxe'
          submodules: recursive
          ref: 'e0b355c6be312c1b17382603f018cf52522ec651'
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'plugins/ecso'
      - uses: actions/download-artifact@v4
        with:
          name: ecso
          path: ${{github.workspace}}/plugins/ecso/
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-osx.tar.gz (Unix)'
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          mkdir ./macBinaries
          curl -sSL https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-osx.tar.gz -o ./macBinaries/haxe_bin.tar.gz
      - name: 'Download https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-osx.tar.gz (Windows)'
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          $DOWNLOADDIR="./macBinaries"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://haxe.org/website-content/downloads/4.3.7/downloads/haxe-4.3.7-osx.tar.gz -OutFile $DOWNLOADDIR/haxe_bin.tar.gz
          path: macBinaries

      - name: Install Neko from S3
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/mac-arm64/neko_2025-04-15_master_e2fa58b.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/include
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/include/*                      /usr/local/include/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - name: Setup Haxe
        run: |
          # mkdir ./macBinaries
          # curl -sSL https://build.haxe.org/builds/haxe/mac/haxe_latest.tar.gz -o ./macBinaries/haxe_bin.tar.gz

          set -ex
          tar -xf macBinaries/*_bin.tar.gz -C macBinaries --strip-components=1
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/macBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/macBinaries/haxelib /usr/local/bin/haxelib
          sudo ln -s `pwd`/macBinaries/std /usr/local/share/haxe/std

      - name: Print Haxe version
        run: haxe -version

      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib

      - name: Install homebrew packages
        if: matrix.BREW_PACKAGES
        run: brew install ${{matrix.BREW_PACKAGES}}

      - name: Test
        run: |
          # disable invalid Unicode filenames on APFS
          echo "" > ${{github.workspace}}/tests/sys/compile-fs.hxml
          haxe RunCi.hxml
        working-directory: ${{github.workspace}}/plugins/ecso/tests


